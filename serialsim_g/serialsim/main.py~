#!/usr/bin/python2.7
# -*- coding: utf-8 -*-

"""
Programm for simulating serail sensors.

(C) 2015 x4x georg.la8585@gmx.at

This program is free software; you can redistribute it and/or
modify it under the terms of the GNU General Public License
as published by the Free Software Foundation; either version 2
of the License, or (at your option) any later version.
This program is distributed in the hope that it will be useful,
but WITHOUT ANY WARRANTY; without even the implied warranty of
MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
GNU General Public License for more details.
You should have received a copy of the GNU General Public License
along with this program; if not, write to the Free Software
Foundation, Inc., 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301, USA.

Name: main.py
Info:
Thema: sonicsim
Date: <2015-02-13 Freitag 14:03>
Version:
"""

from cmd2 import Cmd #, make_option, options
from event import handler
from timer import timer
from sim import sereialsim
from docopt import docopt

__doc__="""Programm for simulating serail sensors.

Usage:
 main.py [ -b <boude> | --boud <boude> ][ -c <com> | --com <com> ][ -m <mode> | --mode <mode> ][ -i <interval> | --interval <interval> ][ --answer <answer> ][ --question <question> ]

Options:
 -h --help      Show this screen.
 -b --boud=boud      set boudrate [default: 9600].
 -c --com=com       set serail interface[default: /dev/ttyUSB0].
 -m --mode=mode      selecte mode (eg.: <poll|cont>) [default: poll].
 -i --interval=interval  interfale for continouse mode in sec [default: 1].
 --answer=answer       answer of the sensor [default: Q, a,b,c].
 --question=question     question string for polled mode [default: ?A].
"""

class App(Cmd):
    """Comandline app for serial simulator"""
    
    def __init__(self):
        #super(App, self).__init__()
        Cmd.__init__(self) # old overlode! super not working.
        if 'arguments'in vars():
            self.mode=     arguments['--mode']
            self.boud=     int(arguments['--boud'])
            self.com=      arguments['--com']
            self.interval= int(arguments['--interval'])
            self.answer=   arguments['--answer']
            self.question= arguments['--question']
        else:
            self.mode=     "poll"
            self.boud=     9600
            self.com=      "/dev/ttyUSB0"
            self.interval= 1
            self.answer=   "Q, +001.59,-002.74, M, 00, 2D"
            self.question= "?A"

        self.do_init()
    
    def do_init(self, opts=None):
        self.isRuning= False
        
        self.handler= handler() # event handler erzeugen!
        self.sim= sereialsim(sport=self.com, boud=self.boud, answer=self.answer, question=self.question)
        self.handler.append(self.sim) # hook output to eventhandler
        if(self.mode == "cont" or self.mode=="continuous"): # continous
            self.mode="cont"
            self.timer= timer(opts.interval, self.handler )
            self.isRuning=True
        elif(self.mode=="poll" or self.mode=="polled"): # polled
            self.mode="poll"
            self.sim.handler.append(self.handler)
            self.sim.setpoll()
            self.isRuning=True
        else: raise Exception("wrong input")
    
    def do_start(self, opts=None):
        """start the simulation"""
        if(not self.isRuning):
            if(self.mode == "cont"): # continous
                self.timer= timer(opts.interval, self.handler )
                self.isRuning=True
            elif(self.mode=="poll"): # polled
                self.sim.handler.append(self.handler)
                self.sim.setpoll()
                self.isRuning=True
        
    def do_stop(self, arg=None, opts=None):
        """stop the simulation"""
        if(self.isRuning):
            if(self.mode == "cont"): # continous
                self.timer.cancel()
                self.isRuning=False
            elif(self.mode=="poll"): # polled
                self.sim.handler.remove(self.handler)
                self.isRuning=False

    def do_setboud(self, arg, opts=None):
        """set the boudrate of the serial interface (e.g.: 9600, 19200)"""
        self.boud= int(''.join(arg))
        self.sim.setBoud(self.boud)

    def do_setinterval(self, arg, opts=None):
        """set the interfal for continous mode"""
        self.boud= int(''.join(arg))
        self.timer.interval= self.boud
    
    def do_setmode(self, arg, opts=None):
        """set the mode of operratione and stop"""
        self.do_stop()
        self.mode= ''.join(arg)
        if(self.mode == "cont" or self.mode=="continuous"): # continous
            self.mode="cont"
        elif(self.mode=="poll" or self.mode=="polled"): # polled
            self.mode="poll"
        else: print("param Error")

    def do_getmode(self, arg, opts=None):
        """get the mode of operatione"""
        print(self.mode)

    def do_getboud(self, arg, opts=None):
        """get the boudrade"""
        print(self.boud)

    def do_setcom(self, arg, opts=None):
        """set teh serial interface"""
        self.com= ''.join(arg)

    def do_getcom(self, arg, opts=None):
        print(self.com)

if __name__ == "__main__":
    arguments = docopt(__doc__, version='Calculator with docopt') # read in parameters
    print arguments
    appm= App()
    appm.cmdloop()
    
